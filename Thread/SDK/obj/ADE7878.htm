<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\ADE7878.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\ADE7878.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Sun Jul 10 09:55:20 2016
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_application_init &rArr; init_Modbus_thread &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2965300]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2965300]">NMI_Handler</a><BR>
 <LI><a href="#[2965288]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2965288]">MemManage_Handler</a><BR>
 <LI><a href="#[296524c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[296524c]">BusFault_Handler</a><BR>
 <LI><a href="#[2965210]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2965210]">UsageFault_Handler</a><BR>
 <LI><a href="#[29651d4]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29651d4]">SVC_Handler</a><BR>
 <LI><a href="#[2965198]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2965198]">DebugMon_Handler</a><BR>
 <LI><a href="#[2965594]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2965594]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a510b8]">eBTFuncReadHoldingRegister</a>
 <LI><a href="#[29ad7b0]">eMBFuncReportSlaveID</a>
 <LI><a href="#[29ae4d0]">eMBFuncReadHoldingRegister</a>
 <LI><a href="#[29ae458]">eMBFuncWriteHoldingRegister</a>
 <LI><a href="#[29ae494]">eMBFuncReadWriteMultipleHoldingRegister</a>
 <LI><a href="#[296533c]">Reset_Handler</a>
 <LI><a href="#[2965300]">NMI_Handler</a>
 <LI><a href="#[2b2a324]">HardFault_Handler</a>
 <LI><a href="#[2965288]">MemManage_Handler</a>
 <LI><a href="#[296524c]">BusFault_Handler</a>
 <LI><a href="#[2965210]">UsageFault_Handler</a>
 <LI><a href="#[29651d4]">SVC_Handler</a>
 <LI><a href="#[2965198]">DebugMon_Handler</a>
 <LI><a href="#[2b2a39c]">PendSV_Handler</a>
 <LI><a href="#[162b9e0]">SysTick_Handler</a>
 <LI><a href="#[296506c]">BOD_IRQHandler</a>
 <LI><a href="#[29bb0b8]">IRC_IRQHandler</a>
 <LI><a href="#[29bac44]">PWRWU_IRQHandler</a>
 <LI><a href="#[29ba8c0]">SRAMF_IRQHandler</a>
 <LI><a href="#[29bb9dc]">CLKF_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[29bab90]">RTC_IRQHandler</a>
 <LI><a href="#[29ba884]">TAMPER_IRQHandler</a>
 <LI><a href="#[29bb838]">EINT0_IRQHandler</a>
 <LI><a href="#[29bb7fc]">EINT1_IRQHandler</a>
 <LI><a href="#[29bb7c0]">EINT2_IRQHandler</a>
 <LI><a href="#[29bb784]">EINT3_IRQHandler</a>
 <LI><a href="#[29bb748]">EINT4_IRQHandler</a>
 <LI><a href="#[29bb70c]">EINT5_IRQHandler</a>
 <LI><a href="#[29bb6d0]">EINT6_IRQHandler</a>
 <LI><a href="#[29bb694]">EINT7_IRQHandler</a>
 <LI><a href="#[29bb4f0]">GPA_IRQHandler</a>
 <LI><a href="#[29b7710]">GPB_IRQHandler</a>
 <LI><a href="#[29bb478]">GPC_IRQHandler</a>
 <LI><a href="#[29b76d4]">GPD_IRQHandler</a>
 <LI><a href="#[29bb400]">GPE_IRQHandler</a>
 <LI><a href="#[29bb3c4]">GPF_IRQHandler</a>
 <LI><a href="#[29bb388]">GPG_IRQHandler</a>
 <LI><a href="#[29bb34c]">GPH_IRQHandler</a>
 <LI><a href="#[29bb310]">GPI_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[29b2d3c]">TMR0_IRQHandler</a>
 <LI><a href="#[29ba80c]">TMR1_IRQHandler</a>
 <LI><a href="#[29ba7d0]">TMR2_IRQHandler</a>
 <LI><a href="#[29ba794]">TMR3_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[29bb004]">PDMA_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[29650a8]">ADC_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[29ba53c]">WDT_IRQHandler</a>
 <LI><a href="#[29ba500]">WWDT_IRQHandler</a>
 <LI><a href="#[29bb928]">EADC0_IRQHandler</a>
 <LI><a href="#[29bb8ec]">EADC1_IRQHandler</a>
 <LI><a href="#[29bb8b0]">EADC2_IRQHandler</a>
 <LI><a href="#[29bb874]">EADC3_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[29650e4]">ACMP_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[29bb07c]">OPA0_IRQHandler</a>
 <LI><a href="#[29bb040]">OPA1_IRQHandler</a>
 <LI><a href="#[29bb130]">ICAP0_IRQHandler</a>
 <LI><a href="#[29bb0f4]">ICAP1_IRQHandler</a>
 <LI><a href="#[29baf8c]">PWM0CH0_IRQHandler</a>
 <LI><a href="#[29baf50]">PWM0CH1_IRQHandler</a>
 <LI><a href="#[29baf14]">PWM0CH2_IRQHandler</a>
 <LI><a href="#[29baed8]">PWM0CH3_IRQHandler</a>
 <LI><a href="#[29bae9c]">PWM0CH4_IRQHandler</a>
 <LI><a href="#[29bae60]">PWM0CH5_IRQHandler</a>
 <LI><a href="#[29bae24]">PWM0_BRK_IRQHandler</a>
 <LI><a href="#[29bac08]">QEI0_IRQHandler</a>
 <LI><a href="#[29bade8]">PWM1CH0_IRQHandler</a>
 <LI><a href="#[29badac]">PWM1CH1_IRQHandler</a>
 <LI><a href="#[29bad70]">PWM1CH2_IRQHandler</a>
 <LI><a href="#[29bad34]">PWM1CH3_IRQHandler</a>
 <LI><a href="#[29bacf8]">PWM1CH4_IRQHandler</a>
 <LI><a href="#[29bacbc]">PWM1CH5_IRQHandler</a>
 <LI><a href="#[29bac80]">PWM1_BRK_IRQHandler</a>
 <LI><a href="#[29babcc]">QEI1_IRQHandler</a>
 <LI><a href="#[29bb5a4]">EPWM0_IRQHandler</a>
 <LI><a href="#[29bb5e0]">EPWM0BRK_IRQHandler</a>
 <LI><a href="#[29bb52c]">EPWM1_IRQHandler</a>
 <LI><a href="#[29bb568]">EPWM1BRK_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[29ba5f0]">USBD_IRQHandler</a>
 <LI><a href="#[29ba5b4]">USBH_IRQHandler</a>
 <LI><a href="#[29ba578]">USB_OTG_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[29bb61c]">EMAC_TX_IRQHandler</a>
 <LI><a href="#[29bb658]">EMAC_RX_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[29ba9b0]">SPI0_IRQHandler</a>
 <LI><a href="#[29ba974]">SPI1_IRQHandler</a>
 <LI><a href="#[29ba938]">SPI2_IRQHandler</a>
 <LI><a href="#[29ba8fc]">SPI3_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[29ba758]">UART0_IRQHandler</a>
 <LI><a href="#[29ba71c]">UART1_IRQHandler</a>
 <LI><a href="#[29ba6e0]">UART2_IRQHandler</a>
 <LI><a href="#[29b4470]">UART3_IRQHandler</a>
 <LI><a href="#[29ba668]">UART4_IRQHandler</a>
 <LI><a href="#[29ba62c]">UART5_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[29bb2d4]">I2C0_IRQHandler</a>
 <LI><a href="#[29bb298]">I2C1_IRQHandler</a>
 <LI><a href="#[29bb25c]">I2C2_IRQHandler</a>
 <LI><a href="#[2a467bc]">I2C3_IRQHandler</a>
 <LI><a href="#[29bb1e4]">I2C4_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[29bab54]">SC0_IRQHandler</a>
 <LI><a href="#[29bab18]">SC1_IRQHandler</a>
 <LI><a href="#[29baadc]">SC2_IRQHandler</a>
 <LI><a href="#[29baaa0]">SC3_IRQHandler</a>
 <LI><a href="#[29baa64]">SC4_IRQHandler</a>
 <LI><a href="#[29baa28]">SC5_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965030]">CAN0_IRQHandler</a>
 <LI><a href="#[29bba54]">CAN1_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[29bb1a8]">I2S0_IRQHandler</a>
 <LI><a href="#[29bb16c]">I2S1_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[29ba9ec]">SD_IRQHandler</a>
 <LI><a href="#[2965594]">Default_Handler</a>
 <LI><a href="#[29bafc8]">PS2D_IRQHandler</a>
 <LI><a href="#[29bba18]">CAP_IRQHandler</a>
 <LI><a href="#[29bb964]">CRYPTO_IRQHandler</a>
 <LI><a href="#[29bb9a0]">CRC_IRQHandler</a>
 <LI><a href="#[29657ec]">SystemInit</a>
 <LI><a href="#[2c22f60]">__main</a>
 <LI><a href="#[2c18c7c]">__I$use$semihosting</a>
 <LI><a href="#[2b2f310]">rt_thread_exit</a>
 <LI><a href="#[2b2ef50]">rt_thread_timeout</a>
 <LI><a href="#[29afc04]">eMBRTUStart</a>
 <LI><a href="#[29afbc8]">eMBRTUStop</a>
 <LI><a href="#[29afc40]">eMBRTUSend</a>
 <LI><a href="#[29afc7c]">eMBRTUReceive</a>
 <LI><a href="#[29afb50]">xMBRTUReceiveFSM</a>
 <LI><a href="#[29afad8]">xMBRTUTransmitFSM</a>
 <LI><a href="#[29afb14]">xMBRTUTimerT35Expired</a>
 <LI><a href="#[2b284ac]">rt_thread_entry_Door</a>
 <LI><a href="#[2b2340c]">rt_thread_entry_Rs485comm</a>
 <LI><a href="#[2b2b788]">rt_init_thread_entry</a>
 <LI><a href="#[2a43a44]">rt_thread_idle_entry</a>
 <LI><a href="#[2a510b8]">eBTFuncReadHoldingRegister</a>
 <LI><a href="#[29ad7b0]">eMBFuncReportSlaveID</a>
 <LI><a href="#[29ae4d0]">eMBFuncReadHoldingRegister</a>
 <LI><a href="#[29ae458]">eMBFuncWriteHoldingRegister</a>
 <LI><a href="#[29ae494]">eMBFuncReadWriteMultipleHoldingRegister</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2c22f60]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2c16a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2c20e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2c16a08]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2c22f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2c169cc]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c20e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2c16990]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2c16954]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2c16b34]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2c16af8]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2c167b0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2c1bdb4]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[2c19834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1eb2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[2c1a608]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[2c1a680]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[2c1aa40]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2c1a8d8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2c1a518]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2c1a590]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2c1a950]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2c1a860]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2c1ae3c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[2c1ac98]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[2c1ac20]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[2c1aba8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2c1ab30]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2c1aab8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2c1ad4c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2c1a4dc]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[2c1a9c8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2c1a7e8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2c1adc4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[2c1804c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c194b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[2c17110]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2c16f30]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2c16ef4]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2c1705c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2c171c4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[2c16fe4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2c20e90]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c169cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2c22f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2c1ebe0]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2c1e85c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1c5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2c1eb2c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2c1bdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2c1eb68]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2c1ea78]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_application_init &rArr; init_Modbus_thread &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2af54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2c1c444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2c1eab4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[2c19f00]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c1c444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2c194b0]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2c1804c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2c194ec]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2c19474]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2c196cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[296533c]"></a>Reset_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[2965300]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2965300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2965300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[2965288]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2965288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2965288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[296524c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[296524c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[296524c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[2965210]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2965210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2965210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29651d4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29651d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29651d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[2965198]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2965198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2965198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29650e4]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29650a8]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[296506c]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[2965030]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bba54]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bba18]"></a>CAP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb9dc]"></a>CLKF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb9a0]"></a>CRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb964]"></a>CRYPTO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb928]"></a>EADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb8ec]"></a>EADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb8b0]"></a>EADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb874]"></a>EADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb838]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb7fc]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb7c0]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb784]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb748]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb70c]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb6d0]"></a>EINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb694]"></a>EINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb658]"></a>EMAC_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb61c]"></a>EMAC_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb5e0]"></a>EPWM0BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb5a4]"></a>EPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb568]"></a>EPWM1BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb52c]"></a>EPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb4f0]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb478]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb400]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb3c4]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb388]"></a>GPG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb34c]"></a>GPH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb310]"></a>GPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb2d4]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb298]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb25c]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb1e4]"></a>I2C4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb1a8]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb16c]"></a>I2S1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb130]"></a>ICAP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb0f4]"></a>ICAP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb0b8]"></a>IRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb07c]"></a>OPA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb040]"></a>OPA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bb004]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bafc8]"></a>PS2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29baf8c]"></a>PWM0CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29baf50]"></a>PWM0CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29baf14]"></a>PWM0CH2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29baed8]"></a>PWM0CH3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bae9c]"></a>PWM0CH4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bae60]"></a>PWM0CH5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bae24]"></a>PWM0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bade8]"></a>PWM1CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29badac]"></a>PWM1CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bad70]"></a>PWM1CH2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bad34]"></a>PWM1CH3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bacf8]"></a>PWM1CH4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bacbc]"></a>PWM1CH5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bac80]"></a>PWM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bac44]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bac08]"></a>QEI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29babcc]"></a>QEI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bab90]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bab54]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29bab18]"></a>SC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29baadc]"></a>SC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29baaa0]"></a>SC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29baa64]"></a>SC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29baa28]"></a>SC5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba9ec]"></a>SD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba9b0]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba974]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba938]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba8fc]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba8c0]"></a>SRAMF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba884]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba80c]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba7d0]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba794]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba758]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba71c]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba6e0]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba668]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba62c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba5f0]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba5b4]"></a>USBH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba578]"></a>USB_OTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba53c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29ba500]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[2965468]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c1c5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2a45c04]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162b7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[162b800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2a436c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2a43738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a437ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2a4441c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2a44458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2a45b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2a45b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[2b0b638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2b0b674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2b0ba34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[2b0fe68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[2b14224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2b1429c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2b142d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2b14350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b14440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2b144b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2b14530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2b1456c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2b2af54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b2ee60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2b2eed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2b2ef8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2b2f310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[2a45bc8]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162b7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[162b800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2a436c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2a43738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a437ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2a4441c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2a44458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2a45b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2a45b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[2b0b638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2b0b674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2b0fe68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[2b14224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2b1429c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2b142d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2b14350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b14440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2b144b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2b14530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2b1456c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2b2ee60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2b2eed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2b2ef8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2b2f310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[2b0b548]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b14350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2b0b50c]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b14350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2b2a39c]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[2b0b4d0]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b0b584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[2b2a360]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[2b2a324]"></a>HardFault_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2a540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[2c238fc]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29ad7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReportSlaveID
<LI><a href="#[29afb8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
</UL>

<P><STRONG><a name="[2c238c0]"></a>__rt_memcpy</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c235f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2c23884]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[2c235f0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[296623c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[2c238c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2c235b4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2c23578]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2c2353c]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2c230c8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2c2308c]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2c23050]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2c1c714]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2c1c6d8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c1c5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2c1c69c]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2c1c5ac]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2965468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[2c1c6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1e85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2c1c444]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c19f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1ea78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2c196cc]"></a>_sys_exit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c19474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2c18c7c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[2c18c40]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[29b8340]"></a>ADE7878Cfg</STRONG> (Thumb, 792 bytes, Stack size 8 bytes, ade7878.o(i.ADE7878Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADE7878Cfg &rArr; SPIWrite4Bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[29b909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite4Bytes
<LI><a href="#[29b90d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite2Bytes
<LI><a href="#[29b9114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[29b69b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878_main
</UL>

<P><STRONG><a name="[29b8304]"></a>ADE7878PSM0</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ade7878.o(i.ADE7878PSM0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADE7878PSM0 &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1628e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[29b9240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[29b69b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878_main
</UL>

<P><STRONG><a name="[29b82c8]"></a>ADE7878Reset</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ade7878.o(i.ADE7878Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADE7878Reset &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1628e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[29b9240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[29b69b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878_main
</UL>

<P><STRONG><a name="[29b828c]"></a>ADE7878SPICfg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ade7878.o(i.ADE7878SPICfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADE7878SPICfg &rArr; SPIWrite1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[29b9114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite1Byte
<LI><a href="#[29b9204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[29b69b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878_main
</UL>

<P><STRONG><a name="[29b69b4]"></a>ADE7878_main</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ad7878_measure.o(i.ADE7878_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADE7878_main &rArr; SPIRead4Bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[29b828c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878SPICfg
<LI><a href="#[29b82c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878Reset
<LI><a href="#[29b8304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878PSM0
<LI><a href="#[29b8340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878Cfg
<LI><a href="#[29b909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite4Bytes
<LI><a href="#[29b90d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite2Bytes
<LI><a href="#[29b9150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead4Bytes
<LI><a href="#[29b9240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2c340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1628efc]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[1627f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigHWSpiport
<LI><a href="#[29b2c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[29b4380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[162b968]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[162ba58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[2495eb0]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(i.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[162b83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1627d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[2495dc0]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, clk.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1628e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[162b83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[162b92c]"></a>CLK_SetHCLK</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[162b83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[162ba58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[1628ec0]"></a>CLK_SetModuleClock</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[29b2c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[29b4380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[162b8f0]"></a>CLK_WaitClockReady</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Called By]<UL><LI><a href="#[162ba58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[1627e58]"></a>ConfigHWDoor</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, doorinout.o(i.ConfigHWDoor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ConfigHWDoor &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1628e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1627e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Config
</UL>

<P><STRONG><a name="[1627f0c]"></a>ConfigHWSpiport</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, config.o(i.ConfigHWSpiport))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ConfigHWSpiport &rArr; SPI_Open &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1627d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[1627da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DisableAutoSS
<LI><a href="#[1628e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[1628efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1627e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Config
</UL>

<P><STRONG><a name="[1627ed0]"></a>ConfigHWled</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, config.o(i.ConfigHWled))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ConfigHWled &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1628e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1627e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Config
</UL>

<P><STRONG><a name="[1627e1c]"></a>Config_ADE7878_IRQ</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ade7878_int.o(i.Config_ADE7878_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Config_ADE7878_IRQ &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1628e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[24ff938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1627e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Config
</UL>

<P><STRONG><a name="[29b9240]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ade7878_spi.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[29b69b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878_main
<LI><a href="#[29b82c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878Reset
<LI><a href="#[29b8304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878PSM0
</UL>

<P><STRONG><a name="[1625680]"></a>Delay_nms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ds12864.o(i.Delay_nms))
<BR><BR>[Called By]<UL><LI><a href="#[1625464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_com
<LI><a href="#[1627de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[29b61bc]"></a>EnterCriticalSection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port.o(i.EnterCriticalSection))
<BR><BR>[Called By]<UL><LI><a href="#[29afb8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[29afbc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[29afc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[29afc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[29afc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[29afcb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[29b4380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[29b6180]"></a>ExitCriticalSection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port.o(i.ExitCriticalSection))
<BR><BR>[Called By]<UL><LI><a href="#[29afb8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[29afbc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[29afc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[29afc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[29afc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[29afcb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[29b4380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[29b7710]"></a>GPB_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, ade7878_int.o(i.GPB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29b76d4]"></a>GPD_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ade7878_int.o(i.GPD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[24ff938]"></a>GPIO_EnableInt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(i.GPIO_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1627e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ADE7878_IRQ
</UL>

<P><STRONG><a name="[1628e84]"></a>GPIO_SetMode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1625608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init12864
<LI><a href="#[1627e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ADE7878_IRQ
<LI><a href="#[1627e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigHWDoor
<LI><a href="#[1627ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigHWled
<LI><a href="#[1627f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigHWSpiport
<LI><a href="#[29b4380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[29b82c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878Reset
<LI><a href="#[29b8304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878PSM0
</UL>

<P><STRONG><a name="[2a467bc]"></a>I2C3_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, eeprom_low.o(i.I2C3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24fda0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearTimeoutFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[24fda0c]"></a>I2C_ClearTimeoutFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i.I2C_ClearTimeoutFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2a467bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_IRQHandler
</UL>

<P><STRONG><a name="[1625608]"></a>Init12864</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ds12864.o(i.Init12864))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init12864 &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1628e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1627de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[2b28524]"></a>KeyProc</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, doorinout.o(i.KeyProc))
<BR><BR>[Called By]<UL><LI><a href="#[2b284ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_Door
</UL>

<P><STRONG><a name="[2b284e8]"></a>KeyRead</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, doorinout.o(i.KeyRead))
<BR><BR>[Called By]<UL><LI><a href="#[2b284ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_Door
</UL>

<P><STRONG><a name="[1627de0]"></a>LCD_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ds12864.o(i.LCD_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_init &rArr; Init12864 &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1625464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_com
<LI><a href="#[1625608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init12864
<LI><a href="#[1625680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nms
</UL>
<BR>[Called By]<UL><LI><a href="#[1627e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Config
</UL>

<P><STRONG><a name="[16254a0]"></a>LCD_sendbyte</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ds12864.o(i.LCD_sendbyte))
<BR><BR>[Called By]<UL><LI><a href="#[1625464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_com
</UL>

<P><STRONG><a name="[1625464]"></a>LCD_write_com</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ds12864.o(i.LCD_write_com))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_write_com
</UL>
<BR>[Calls]<UL><LI><a href="#[16254a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_sendbyte
<LI><a href="#[1625680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nms
</UL>
<BR>[Called By]<UL><LI><a href="#[1627de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[29b9204]"></a>SPIDelay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ade7878_spi.o(i.SPIDelay))
<BR><BR>[Called By]<UL><LI><a href="#[29b828c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878SPICfg
<LI><a href="#[29b909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite4Bytes
<LI><a href="#[29b90d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite2Bytes
<LI><a href="#[29b9114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite1Byte
<LI><a href="#[29b9150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead4Bytes
</UL>

<P><STRONG><a name="[29b9150]"></a>SPIRead4Bytes</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ade7878_spi.o(i.SPIRead4Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIRead4Bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[296d3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearRxFIFO
<LI><a href="#[29b9204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[29b69b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878_main
</UL>

<P><STRONG><a name="[29b9114]"></a>SPIWrite1Byte</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, ade7878_spi.o(i.SPIWrite1Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPIWrite1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[29b9204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[29b828c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878SPICfg
<LI><a href="#[29b8340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878Cfg
</UL>

<P><STRONG><a name="[29b90d8]"></a>SPIWrite2Bytes</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, ade7878_spi.o(i.SPIWrite2Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPIWrite2Bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[29b9204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[29b69b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878_main
<LI><a href="#[29b8340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878Cfg
</UL>

<P><STRONG><a name="[29b909c]"></a>SPIWrite4Bytes</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, ade7878_spi.o(i.SPIWrite4Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPIWrite4Bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[29b9204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[29b69b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878_main
<LI><a href="#[29b8340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878Cfg
</UL>

<P><STRONG><a name="[296d3ac]"></a>SPI_ClearRxFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(i.SPI_ClearRxFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[29b9150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead4Bytes
</UL>

<P><STRONG><a name="[1627da4]"></a>SPI_DisableAutoSS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(i.SPI_DisableAutoSS))
<BR><BR>[Called By]<UL><LI><a href="#[1627f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigHWSpiport
</UL>

<P><STRONG><a name="[1627d68]"></a>SPI_Open</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, spi.o(i.SPI_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_Open &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2495eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1627f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigHWSpiport
</UL>

<P><STRONG><a name="[1627e94]"></a>SYS_Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, config.o(i.SYS_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SYS_Config &rArr; ConfigHWSpiport &rArr; SPI_Open &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1627de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[1627e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ADE7878_IRQ
<LI><a href="#[1627e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigHWDoor
<LI><a href="#[1627ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigHWled
<LI><a href="#[1627f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigHWSpiport
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2c340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[162ba58]"></a>SYS_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYS_Init &rArr; CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[162b83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[162b878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[162b8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[162b92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[162b968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[162ba1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2c340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[162b878]"></a>SYS_UnlockReg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sys.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[162ba58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[162ba1c]"></a>SetSysTick</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, main.o(i.SetSysTick))
<BR><BR>[Called By]<UL><LI><a href="#[162ba58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[162b9e0]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check
</UL>
<BR>[Calls]<UL><LI><a href="#[162b788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[162b7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[162b800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[162b83c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, system_nuc472_442.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2495dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[162b92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[162ba58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[2495eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>

<P><STRONG><a name="[29657ec]"></a>SystemInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_nuc472_442.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(.text)
</UL>
<P><STRONG><a name="[29663a4]"></a>TIMER_Close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer_nuc.o(i.TIMER_Close))
<BR><BR>[Called By]<UL><LI><a href="#[29b2d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
</UL>

<P><STRONG><a name="[296623c]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, timer_nuc.o(i.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER_GetModuleClock &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2c235f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1624528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[1624528]"></a>TIMER_Open</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, timer_nuc.o(i.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[296623c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[29b2c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[29b2cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[29b2d3c]"></a>TMR0_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, porttimer.o(i.TMR0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR0_IRQHandler &rArr; prvvTIMERExpiredISR
</UL>
<BR>[Calls]<UL><LI><a href="#[29b3174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvTIMERExpiredISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29b4470]"></a>UART3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, portserial.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART3_IRQHandler &rArr; prvvUARTTxReadyISR
</UL>
<BR>[Calls]<UL><LI><a href="#[29b4740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTTxReadyISR
<LI><a href="#[29b477c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTRxISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[2969fe0]"></a>UART_DisableFlowCtrl</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UART_DisableFlowCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[29b4380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[2969fa4]"></a>UART_DisableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UART_DisableInt))
<BR><BR>[Called By]<UL><LI><a href="#[29b43f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>

<P><STRONG><a name="[2969f2c]"></a>UART_EnableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UART_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[29b4380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[29b43f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>

<P><STRONG><a name="[1628e48]"></a>UART_Open</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2495dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[29b4380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[2b11560]"></a>__rt_ffs</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[2b0b584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[2b14350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[29afa9c]"></a>crc_ccitt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mbcrc.o(i.crc_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[29afb8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
</UL>

<P><STRONG><a name="[2a510b8]"></a>eBTFuncReadHoldingRegister</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, btfunc.o(i.eBTFuncReadHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eBTFuncReadHoldingRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[29ae41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[2a4fc54]"></a>eMBEnable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mb.o(i.eMBEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2b788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[29ae4d0]"></a>eMBFuncReadHoldingRegister</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, mbfuncholding.o(i.eMBFuncReadHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eMBFuncReadHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[29ae41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[29b1914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[29ae494]"></a>eMBFuncReadWriteMultipleHoldingRegister</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, mbfuncholding.o(i.eMBFuncReadWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eMBFuncReadWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[29ae41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[29b1914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[29ad7b0]"></a>eMBFuncReportSlaveID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mbfuncother.o(i.eMBFuncReportSlaveID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBFuncReportSlaveID
</UL>
<BR>[Calls]<UL><LI><a href="#[2c238fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[29ae458]"></a>eMBFuncWriteHoldingRegister</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mbfuncholding.o(i.eMBFuncWriteHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eMBFuncWriteHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[29ae41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[29b1914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[2a4fc18]"></a>eMBInit</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, mb.o(i.eMBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = eMBInit &rArr; eMBRTUInit &rArr; xMBPortTimersInit &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[29afcb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[29b56f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2b788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[2a4fbdc]"></a>eMBPoll</STRONG> (Thumb, 516 bytes, Stack size 16 bytes, mb.o(i.eMBPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eMBPoll &rArr; peBTFrameSendCur &rArr; vMBPortSerialEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[29afb8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[29b56b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[29b5730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2340c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_Rs485comm
</UL>

<P><STRONG><a name="[29afcb8]"></a>eMBRTUInit</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, mbrtu.o(i.eMBRTUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eMBRTUInit &rArr; xMBPortTimersInit &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[29b2c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[29b4380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[29b6180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[29b61bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4fc18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[29afc7c]"></a>eMBRTUReceive</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRTUReceive &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[29afa60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[29b6180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[29b61bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[29afc40]"></a>eMBRTUSend</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRTUSend &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[29afa60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[29b43f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[29b6180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[29b61bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[29afc04]"></a>eMBRTUStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = eMBRTUStart &rArr; vMBPortTimersEnable &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[29b2cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[29b43f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[29b6180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[29b61bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[29afbc8]"></a>eMBRTUStop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eMBRTUStop &rArr; vMBPortSerialEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[29b2d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[29b43f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[29b6180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[29b61bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[29b1914]"></a>eMBRegHoldingCB</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, user_mb_app.o(i.eMBRegHoldingCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[29b1860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[29b189c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[29ae458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[29ae494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[29ae4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[2b2b74c]"></a>init_Door_thread</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, doorinout.o(i.init_Door_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = init_Door_thread &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a435d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2a4360c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2b7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[2b2b710]"></a>init_Modbus_thread</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, modbus_app.o(i.init_Modbus_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = init_Modbus_thread &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a435d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2a4360c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2b7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[2b2af54]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, startup.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; init_Modbus_thread &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b2af18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1ea78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[29afb8c]"></a>peBTFrameSendCur</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, mbrtu.o(i.peBTFrameSendCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = peBTFrameSendCur &rArr; vMBPortSerialEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[29afa9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_ccitt
<LI><a href="#[29b43f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[29b6180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[29b61bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
<LI><a href="#[2c238fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4fbdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[29ae41c]"></a>prveMBError2Exception</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mbutils.o(i.prveMBError2Exception))
<BR><BR>[Called By]<UL><LI><a href="#[29ae458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[29ae494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[29ae4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
<LI><a href="#[2a510b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eBTFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[2b2b7c4]"></a>rt_application_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, application.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_application_init &rArr; init_Modbus_thread &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a435d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2b2b710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modbus_thread
<LI><a href="#[2b2b74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Door_thread
<LI><a href="#[2b2f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2af18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2a446ec]"></a>rt_device_init_all</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, device.o(i.rt_device_init_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_device_init_all
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2af18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2a43738]"></a>rt_free</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, mem.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[2a436fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b100c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[2b14530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2b1456c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2a436c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2a437ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[2b2c340]"></a>rt_hw_board_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_hw_board_init &rArr; SYS_Config &rArr; ConfigHWSpiport &rArr; SPI_Open &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1627e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Config
<LI><a href="#[162ba58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[29b69b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7878_main
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2af18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2b2a540]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_hw_hard_fault_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2a324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[2b2ef14]"></a>rt_hw_stack_init</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2f3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[2b2b788]"></a>rt_init_thread_entry</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, application.o(i.rt_init_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_init_thread_entry &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortTimersInit &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4fc18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
<LI><a href="#[2a4fc54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[162b800]"></a>rt_interrupt_enter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[162b9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2a436fc]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(i.rt_interrupt_get_nest))
<BR><BR>[Called By]<UL><LI><a href="#[2a43738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a437ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2b0fe68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[2b14440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2b144b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2b14530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[162b7c4]"></a>rt_interrupt_leave</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[162b9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2b144b8]"></a>rt_malloc</STRONG> (Thumb, 558 bytes, Stack size 32 bytes, mem.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[2a436fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b14530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2b1456c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2b14440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2b2f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[2b113bc]"></a>rt_memset</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2f3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[2b14440]"></a>rt_object_allocate</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[2a436fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b0d000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[2b111dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[2b144b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[2a436c0]"></a>rt_object_delete</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[2a43738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b0cfc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2a437ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2b2f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[2a44458]"></a>rt_object_detach</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b0cfc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2eed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2b2f310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[2a4441c]"></a>rt_object_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b0d000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[2b111dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4360c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[2b145a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2b2ee9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[2a43684]"></a>rt_object_is_systemobject</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Called By]<UL><LI><a href="#[2a437ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2b2f310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[2b14350]"></a>rt_schedule</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b0b50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[2b0b548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[2b0ba34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[2b11560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[2a435d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2a45b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[2b14530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2b1456c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2b2ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[2b2ef8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2b2f310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[2b0b674]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2b142d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2b2ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[2b0b638]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1429c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2b2f310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[2b145a8]"></a>rt_sem_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4441c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2b150ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0fe68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[2b1456c]"></a>rt_sem_release</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b14350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b14ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2b15160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[2a43738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2b144b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[2b14530]"></a>rt_sem_take</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[2a436fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2a45b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b14224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2b14260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2b14350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b150e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[2a43738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2b144b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[2b11380]"></a>rt_show_version</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Called By]<UL><LI><a href="#[2b2af18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2b111dc]"></a>rt_strncpy</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4441c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2b14440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[2b0fe68]"></a>rt_system_heap_init</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, mem.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_system_heap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a436fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b145a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2af18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2b0cbc8]"></a>rt_system_object_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, object.o(i.rt_system_object_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b2af18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2b0b5c0]"></a>rt_system_scheduler_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2af18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2b0b584]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0b4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[2b11560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2af18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2a45cf4]"></a>rt_system_tick_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clock.o(i.rt_system_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b2af18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2b2cdcc]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2d114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2af18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2b2cd90]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b2af18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2b2f0b8]"></a>rt_thread_create</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[2a436c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2b14440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2b144b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2b2f3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2b7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[2b2f07c]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(i.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2ef8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2340c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_Rs485comm
<LI><a href="#[2b284ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_Door
</UL>

<P><STRONG><a name="[2b284ac]"></a>rt_thread_entry_Door</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, doorinout.o(i.rt_thread_entry_Door))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_entry_Door &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2b284e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyRead
<LI><a href="#[2b28524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
<LI><a href="#[2b2f07c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> doorinout.o(i.init_Door_thread)
</UL>
<P><STRONG><a name="[2a437ec]"></a>rt_thread_idle_excute</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[2a43684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2a436c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2a436fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2a43738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a43a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2a43a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[2a437b0]"></a>rt_thread_idle_init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a435d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2a4360c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2af18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2a4360c]"></a>rt_thread_init</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4441c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2b2f3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a437b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[2b2b710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modbus_thread
<LI><a href="#[2b2b74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Door_thread
</UL>

<P><STRONG><a name="[2b142d8]"></a>rt_thread_resume</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b0b674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2b2ee60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2b2f34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2a435d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2b15160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>

<P><STRONG><a name="[2a45b8c]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[162b788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[2a435d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2b14530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[2b2ef8c]"></a>rt_thread_sleep</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b14224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2b14260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2b1429c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2b14350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2f07c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[2a435d0]"></a>rt_thread_startup</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2b142d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2b14350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[2a437b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[2b2b710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modbus_thread
<LI><a href="#[2b2b74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Door_thread
<LI><a href="#[2b2b7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[2b1429c]"></a>rt_thread_suspend</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_thread_suspend &rArr; rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b0b638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[2b150e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[2b2ef8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[2b2ef50]"></a>rt_thread_timeout</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0b674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2b14350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b2f34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[2a45b50]"></a>rt_thread_yield</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, thread.o(i.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b14350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b2f34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[162b788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[2a45c7c]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[2a45b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2b14224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[162b788]"></a>rt_tick_increase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_tick_increase &rArr; rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2a45b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[2a45b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[162b9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2a45b14]"></a>rt_timer_check</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_check &rArr; rt_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2a45c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2b14224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2b2d09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2b2d150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[162b788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[2b14260]"></a>rt_timer_control</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_timer_control
</UL>
<BR>[Called By]<UL><LI><a href="#[2b14530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2b2ef8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[2b2eed8]"></a>rt_timer_detach</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[2a44458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b2d150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2f310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[2b2ee9c]"></a>rt_timer_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4441c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2b2d18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2f3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[2b14224]"></a>rt_timer_start</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2a45c7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2b2d0d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[2a45b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2b14530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2b2ef8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[2b2ee60]"></a>rt_timer_stop</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b2d150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2b142d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[2b2af18]"></a>rtthread_startup</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, startup.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; init_Modbus_thread &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a437b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[2a446ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init_all
<LI><a href="#[2a45cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_tick_init
<LI><a href="#[2b0b584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[2b0b5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[2b0cbc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_object_init
<LI><a href="#[2b0fe68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[2b11380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[2b2b7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[2b2c340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[2b2cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[2b2cdcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2af54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29b189c]"></a>ucMBMasterGetDestAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_mb_app.o(i.ucMBMasterGetDestAddress))
<BR><BR>[Called By]<UL><LI><a href="#[29b1914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>

<P><STRONG><a name="[29afa60]"></a>usMBCRC16</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mbcrc.o(i.usMBCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[29afc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[29afc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
</UL>

<P><STRONG><a name="[29b43f8]"></a>vMBPortSerialEnable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, portserial.o(i.vMBPortSerialEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vMBPortSerialEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[2969f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[2969fa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[29afad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[29afb8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[29afbc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[29afc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[29afc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
</UL>

<P><STRONG><a name="[29b2d00]"></a>vMBPortTimersDisable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, porttimer.o(i.vMBPortTimersDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPortTimersDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29663a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Close
<LI><a href="#[29b31b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[29afb14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[29afbc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
</UL>

<P><STRONG><a name="[29b2cc4]"></a>vMBPortTimersEnable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, porttimer.o(i.vMBPortTimersEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vMBPortTimersEnable &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1624528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[29b31ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[29b3228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[29b3264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[29afb50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
<LI><a href="#[29afc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
</UL>

<P><STRONG><a name="[29b1860]"></a>xMBMasterGetCBRunInMasterMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_mb_app.o(i.xMBMasterGetCBRunInMasterMode))
<BR><BR>[Called By]<UL><LI><a href="#[29b1914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>

<P><STRONG><a name="[29b5730]"></a>xMBPortEventGet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventGet))
<BR><BR>[Called By]<UL><LI><a href="#[2a4fbdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[29b56f4]"></a>xMBPortEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventInit))
<BR><BR>[Called By]<UL><LI><a href="#[2a4fc18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[29b56b8]"></a>xMBPortEventPost</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventPost))
<BR><BR>[Called By]<UL><LI><a href="#[29afad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[29afb14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[2a4fbdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[29b43bc]"></a>xMBPortSerialGetByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, portserial.o(i.xMBPortSerialGetByte))
<BR><BR>[Called By]<UL><LI><a href="#[29afb50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
</UL>

<P><STRONG><a name="[29b4380]"></a>xMBPortSerialInit</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, portserial.o(i.xMBPortSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xMBPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1628e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[1628e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[1628ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[1628efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[2969f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[2969fe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableFlowCtrl
<LI><a href="#[29b6180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[29b61bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Called By]<UL><LI><a href="#[29afcb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[29b4344]"></a>xMBPortSerialPutByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portserial.o(i.xMBPortSerialPutByte))
<BR><BR>[Called By]<UL><LI><a href="#[29afad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
</UL>

<P><STRONG><a name="[29b2c88]"></a>xMBPortTimersInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, porttimer.o(i.xMBPortTimersInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xMBPortTimersInit &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1624528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[1628ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[1628efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[29b31b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Stop
<LI><a href="#[29b31ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[29b3228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[29b3264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[29afcb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[29afb50]"></a>xMBRTUReceiveFSM</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mbrtu.o(i.xMBRTUReceiveFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xMBRTUReceiveFSM &rArr; vMBPortTimersEnable &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[29b2cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[29b43bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[29afb14]"></a>xMBRTUTimerT35Expired</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mbrtu.o(i.xMBRTUTimerT35Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xMBRTUTimerT35Expired &rArr; vMBPortTimersDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29b2d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[29b56b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[29afad8]"></a>xMBRTUTransmitFSM</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, mbrtu.o(i.xMBRTUTransmitFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xMBRTUTransmitFSM &rArr; vMBPortSerialEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[29b4344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
<LI><a href="#[29b43f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[29b56b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[2c19834]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[2c1bdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2c197f8]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2c197bc]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2965594]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2965594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2965594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29b477c]"></a>prvvUARTRxISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial.o(i.prvvUARTRxISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTRxISR
</UL>
<BR>[Called By]<UL><LI><a href="#[29b4470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[29b4740]"></a>prvvUARTTxReadyISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial.o(i.prvvUARTTxReadyISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTTxReadyISR
</UL>
<BR>[Called By]<UL><LI><a href="#[29b4470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[29b3264]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, porttimer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[29b2c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[29b2cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[29b3228]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, porttimer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[29b2c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[29b2cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[29b31ec]"></a>TIMER_EnableInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, porttimer.o(i.TIMER_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[29b2c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[29b2cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[29b31b0]"></a>TIMER_Stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, porttimer.o(i.TIMER_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[29b2c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[29b2d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
</UL>

<P><STRONG><a name="[29b3174]"></a>prvvTIMERExpiredISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, porttimer.o(i.prvvTIMERExpiredISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvTIMERExpiredISR
</UL>
<BR>[Called By]<UL><LI><a href="#[29b2d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[2a43a80]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[2a437ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[2a43a44]"></a>rt_thread_idle_entry</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[2a437ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[2b15160]"></a>rt_ipc_list_resume</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2b142d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1456c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[2b150e8]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1429c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2b15034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[2b14530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[2b150ac]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b15070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b145a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>

<P><STRONG><a name="[2b15070]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b150ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[2b15034]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[2b150e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[2b14ff8]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[2b1456c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[2b100c0]"></a>plug_holes</STRONG> (Thumb, 170 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[2a43738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[2b0d000]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[2a4441c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2b14440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[2b0cfc4]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[2a436c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2a44458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[2b0ba34]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, scheduler.o(i._rt_scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _rt_scheduler_stack_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2b14350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2b0b9f8]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b0b5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[2b2f3c4]"></a>_rt_thread_init</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b113bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2b2ee9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[2b2ef14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4360c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[2b2f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[2b2f388]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[2b2f310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[2b2f34c]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[2a45b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[2b142d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2b2ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[2b2f310]"></a>rt_thread_exit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2a43684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2a44458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2a45bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a45c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b0b638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2b14350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b2eed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2b2f388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[2b2d18c]"></a>_rt_timer_init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2d114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2ee9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[2b2d150]"></a>_rt_timer_remove</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2a45b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2b2ee60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2b2eed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[2b2d114]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b2cdcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[2b2d18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[2b2d0d8]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[2b14224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[2b2d09c]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[2a45b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[2b2340c]"></a>rt_thread_entry_Rs485comm</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_app.o(i.rt_thread_entry_Rs485comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_entry_Rs485comm &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4fbdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[2b2f07c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(i.init_Modbus_thread)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
